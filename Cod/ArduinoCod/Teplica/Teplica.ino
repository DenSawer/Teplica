/*
–ü—Ä–æ–µ–∫—Ç: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ–ø–ª–∏—Ü—ã
–í–µ—Ä—Å–∏—è: ESP32_0.5 14.04.25
–°–æ–∑–¥–∞—Ç–µ–ª–∏: –ö—Ä—é—á–∫–æ–≤ –î.–î., –†–∞–¥—á–µ–Ω–∫–æ –ù.–û.
*/

#include <Wire.h>               // –¥–ª—è —à–∏–Ω—ã I2C
#include <Adafruit_Sensor.h>    // –æ–±—â–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è Adafruit
#include <BH1750.h>             // BH1750 (lightSensor)
#include <Adafruit_BME280.h>    // BME280 (airSensor)
#include <Adafruit_SHT4x.h>     // SHT4x (airSensor)
#include <Adafruit_SHT31.h>     // SHT31 (airSensor)
#include <SHT2x.h>              // SHT2x (airSensor)
#include <DHT.h>                // DHT (airSensor)
#include <OneWire.h>            // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å DS18B20 (soilTempSensor)
#include <DallasTemperature.h>  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π DS18B20 –∏ –≤—ã–¥–∞—á–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (soilTempSensor)
#include <SensirionI2cScd4x.h>  // SCD40 or SCD41 (CO2Sensor)
#include <Adafruit_SCD30.h>     // SCD31 (CO2Sensor)
#include <LiquidCrystal_I2C.h>  // LCD –ø–æ I2C
#include <SPI.h>                // SPI (–î–ª—è Ethernet, SD)
#include <SD.h>                 // SD
#include <ArduinoJson.h>        // JSON –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ë–î
#include <WiFi.h>               // WiFi
#include <time.h>               // time for esp
#include <WebServer.h>          // –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
#include <DNSServer.h>          // –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–∏–Ω—Ç—Ä–µ—Ñ–µ–π—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–æ–º(–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
#include <UIPEthernet.h>        // Ethernet
#include <HTTPClient.h>         // –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
#include <EEPROM.h>
#include <PCF8574.h>

//--------------------------------–ü–ò–ù–´-------------------------------------
#define LDR_PIN 34            // –ü–∏–Ω —Ñ–æ—Ç–æ—Ä–µ–∑–∏—Å—Ç–æ—Ä–∞
#define LAMP_PIN 25           // –ü–∏–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–æ–π
#define DHT_PIN 15            // –ü–∏–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ DHT
#define HEAT_PIN 32           // –ü–∏–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ–≥—Ä–µ–≤–æ–º (–∫—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥)
#define COOL_PIN 33           // –ü–∏–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ–º (—Å–∏–Ω–∏–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥)
#define SOIL_MOISTURE_PIN 35  // –ü–∏–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—á–≤—ã HW-080
#define SOIL_TEMP_PIN 14      // –ü–∏–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ—á–≤—ã ds18b20
#define BIPER_PIN 26          // –ë–∏–ø–µ—Ä –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
#define HSPI_MISO 19          // HSPI
#define HSPI_MOSI 23          // HSPI
#define HSPI_CLK 18           // HSPI
#define SD_CS_PIN 4           // HSPI CS –¥–ª—è SD
#define ETHERNET_CS_PIN 5     // HSPI CS –¥–ª—è Ethernet
#define SIM_RX 16             // UART –¥–ª—è SIM800L
#define SIM_TX 17             // UART –¥–ª—è SIM800L
#define SDA_PIN 21            // I2C
#define SCL_PIN 22            // I2C
#define KNOPKA_PIN            // –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –¥–∏—Å–ø–ª–µ—è

HardwareSerial sim800(1);  // UART –¥–ª—è SIM800L
EthernetClient client;     // –¥–ª—è Ethernet

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
struct {
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∑–∞–¥–∞–Ω–Ω–æ–π Wi-Fi —Å–µ—Ç–∏
  String ssid_WiFi = "POCO X6 5G";     // –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ WiFi
  String password_WiFi = "123456789";  // –ü–∞—Ä–æ–ª—å —Å–µ—Ç–∏ WiFi
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  String ssid_AP = "Teplica";  // –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ WiFi —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  uint8_t gUTC = 3;            // –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å RTC
} settings;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–ª–∏—Ü—ã
struct {
  float airTemp = 0.0;      // —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ ¬∞C
  float soilTemp = 0.0;     // —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã ¬∞C
  uint8_t airHum = 0;       // –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ %
  int8_t soilMois = 0;      // –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã %
  uint16_t lightLevel = 0;  // —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏ –õ–∫
  uint16_t CO2ppm = 0;      // —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏ ppm
} data;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
struct {
  bool LCD = false;
  bool SD = false;
  bool Ethernet = false;
  bool SIM = false;
  bool airSensor = false;
  bool CO2Sensor = false;
  bool soilTempSensor = false;
  bool lightSensor = false;
  bool soilMoisSensor = false;
} isPresent;

// === üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—è ===
// –î–Ω–µ–≤–Ω—ã–µ –∏ –Ω–æ—á–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–∑–¥—É—Ö–∞
float T_air_day_min = 17.0;    // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –¥–Ω—ë–º
float T_air_day_max = 25.0;    // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –¥–Ω—ë–º
float T_air_night_min = 15.0;  // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –Ω–æ—á—å—é
float T_air_night_max = 22.0;  // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –Ω–æ—á—å—é
float T_air_cool_off = 21.0;   // —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏

// –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã
float T_soil_min = 18.0;  // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã
float T_soil_off = 20.0;  // —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–∫–ª—é—á–∞–µ–º –æ–±–æ–≥—Ä–µ–≤

// –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞
uint8_t H_air_min = 45;  // –Ω–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—è
uint8_t H_air_max = 65;  // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
uint8_t H_air_ok = 55;   // –ø–æ—Ä–æ–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—è

// –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã
int8_t M_soil_min = 85;  // –ø–æ—Ä–æ–≥ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–∏–≤–∞
int8_t M_soil_max = 90;  // –ø–æ—Ä–æ–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–∏–≤–∞

// CO‚ÇÇ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
uint16_t CO2_min = 200;  // –Ω–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ –≤–∫–ª—é—á–µ–Ω–∏—è –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏
uint16_t CO2_ok = 350;   // –ø–æ—Ä–æ–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏

// –û—Å–≤–µ—â–µ–Ω–∏–µ
uint16_t light_min = 3000;      // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏
uint8_t light_start_hour = 17;  // —Å –∫–∞–∫–æ–≥–æ —á–∞—Å–∞ –≤–∫–ª—é—á–∞—Ç—å –¥–æ—Å–≤–µ—Ç–∫—É
uint8_t light_end_hour = 20;    // –¥–æ –∫–∞–∫–æ–≥–æ —á–∞—Å–∞ –≤–∫–ª—é—á–∞—Ç—å –¥–æ—Å–≤–µ—Ç–∫—É

// === üîå –ò–Ω–¥–µ–∫—Å—ã —Ä–µ–ª–µ —á–µ—Ä–µ–∑ PCF8574 ===
PCF8574 pcf(0x20);  // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ PCF8574 (I2C, 0x20 ‚Äî –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
#define RELAY_HEATER 0
#define RELAY_FAN 1
#define RELAY_HUMIDIFIER 2
#define RELAY_PUMP 3
#define RELAY_LIGHT 4
#define RELAY_VENT_CO2 5

bool relayState[8] = { false };

//------------------------–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ESP32--------------------------

//---------------RTC---------------
#define NTP_SERVER "pool.ntp.org"        // NTP —Å–µ—Ä–≤–µ—Ä, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
time_t lastSyncTime = 0;                 // –±—É—Ñ—Ñ–µ—Ä–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
const uint16_t timeSyncInterval = 3600;  // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
//---------------AP----------------
// –°–æ–∑–¥–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 80
WebServer server(80);
DNSServer dnsServer;  // –î–ª—è Captive Portal

bool isConnect = false;
#define EEPROM_FLAG_ADDR 0  // 1 –±–∞–π—Ç: –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
#define EEPROM_MAC_ADDR 1   // 6 –±–∞–π—Ç: MAC
#define EEPROM_IP_ADDR 7    // 4 –±–∞–π—Ç–∞: IP

bool knopka = true;

//!------------------------------SIM---------------------------------!

const char *defaultAPN = "mcs";
const char *defaultUser = "";
const char *defaultPass = "";
// –ª–∏—Å—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å –∏—Ö –∞–ø–Ω, —é–∑–µ—Ä–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º
const char *apnList[][4] = {
  { "25099", "internet.beeline.ru", "", "" },
  { "25001", "internet.mts.ru", "mts", "mts" },
  { "25002", "internet", "gdata", "gdata" },
  { "25020", "internet.tele2.ru", "tele2", "tele2" },
  { "25026", "internet.yota", "", "" },
  { "25096", "Inter96", "Inter96", "Inter96" },
  { "25098", "mcs", "", "" }
};
bool InternetFromSIM = false;

//!-----------------------------–î–∏—Å–ø–ª–µ–π-------------------------------------!

#define LCD_ADDRESS 0x27  // –ê–¥—Ä–µ—Å—Å –¥–∏—Å–ø–ª–µ—è
#define LCD_COLUMNS 20    // –ö–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∏—Å–ø–ª–µ—è
#define LCD_ROWS 4        // –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –¥–∏—Å–ø–ª–µ—è
LiquidCrystal_I2C lcd(LCD_ADDRESS, LCD_COLUMNS, LCD_ROWS);

#define SYM_GALOCHKA 3
#define SYM_CELSIUS 4
#define SYM_GRADUS_C 5

void loadCustomChars() {
  // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  uint8_t galochkaChar[8] = { 0, 0, 1, 2, 20, 8, 0, 0 };
  uint8_t celsiusChar[8] = { 28, 20, 28, 3, 4, 4, 4, 3 };
  uint8_t gradusCChar[8] = { 0x1E, 0x12, 0x12, 0x1E, 0x00, 0x00, 0x00, 0x00 };
  lcd.createChar(SYM_GALOCHKA, galochkaChar);
  lcd.createChar(SYM_CELSIUS, celsiusChar);
  lcd.createChar(SYM_GRADUS_C, gradusCChar);
}

//!-----------------–î–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞-------------------!

// –û–±—ä–µ–∫—Ç—ã –¥–∞—Ç—á–∏–∫–æ–≤
DHT dht(DHT_PIN, DHT22);
Adafruit_BME280 bme;
Adafruit_SHT4x sht4;
Adafruit_SHT31 sht3;
SHT2x sht2;

//!-------------------------–î–∞—Ç—á–∏–∫–∏ —É—Ä–æ–≤–Ω—è –°–û2 –≤ –≤–æ–∑–¥—É—Ö–µ---------------------------------!

SensirionI2cScd4x scd4x;
Adafruit_SCD30 scd30;

//!-------------------------–î–∞—Ç—á–∏–∫–∏ –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏---------------------------------!

BH1750 lightMeter;

//!-------------------------–î–∞—Ç—á–∏–∫–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—á–≤—ã---------------------------------!

//–∞–Ω–∞–ª–æ–≥–æ–≤—ã–π –µ–º–∫–æ—Å—Ç–Ω–æ–π v1.2, —Å—Ä–∞–∑—É —Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—ç—Ç–æ–º—É —Ç—É—Ç –≥–æ–ª—è–∫

//!-------------------------–î–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ—á–≤—ã---------------------------------!

OneWire oneWire(SOIL_TEMP_PIN);
DallasTemperature sensors(&oneWire);
bool ds18b20_present = false;
uint8_t sensorCount = 0;

//------------Other-------------
void showLoadingProgressBar(const char *str, bool yes_no = false);
