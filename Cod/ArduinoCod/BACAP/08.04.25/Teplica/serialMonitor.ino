void serialMonitor() {
  struct tm timeinfo;
  if (getLocalTime(&timeinfo)) {
    Serial.println("===================================");
    Serial.print("üìÖ –í—Ä–µ–º—è: ");
    Serial.println(&timeinfo, "%Y-%m-%d %H:%M:%S");

    Serial.println("üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:");
    Serial.printf("üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞:     %.2f ¬∞C\n", data.airTemp);
    Serial.printf("üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã:       %.2f ¬∞C\n", data.soilTemp);
    Serial.printf("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞:         %u %%\n", data.airHum);
    Serial.printf("üå± –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã:           %d %%\n", data.soilMois);
    Serial.printf("üí° –û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å:              %u –õ–∫\n", data.lightLevel);
    Serial.printf("üü¢ –£—Ä–æ–≤–µ–Ω—å CO‚ÇÇ:               %u ppm\n", data.CO2ppm);
    Serial.println("===================================");
  } else {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏");
  }
}
/*
void printCPULoad() {
  static uint32_t prevIdle0 = 0, prevIdle1 = 0;
  static uint32_t prevTime = 0;

  TaskStatus_t taskStatus[2];
  UBaseType_t taskCount;
  uint32_t totalRunTime;

  taskCount = uxTaskGetSystemState(taskStatus, 2, &totalRunTime);

  uint32_t idle0 = taskStatus[0].ulRunTimeCounter;  // –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —è–¥—Ä–∞ 0
  uint32_t idle1 = taskStatus[1].ulRunTimeCounter;  // –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —è–¥—Ä–∞ 1
  uint32_t currentTime = millis();

  if (prevTime > 0 && totalRunTime > 0) {
    float elapsedTime = (currentTime - prevTime) * 1000.0;  // –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö

    float load0 = 100.0 - ((idle0 - prevIdle0) * 100.0 / elapsedTime);
    float load1 = 100.0 - ((idle1 - prevIdle1) * 100.0 / elapsedTime);

    Serial.printf("CPU0 Load: %.2f%% | CPU1 Load: %.2f%%\n", load0, load1);
  }

  prevIdle0 = idle0;
  prevIdle1 = idle1;
  prevTime = currentTime;
}*/
